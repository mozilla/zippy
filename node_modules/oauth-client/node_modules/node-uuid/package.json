{
  "name": "node-uuid",
  "description": "Simple, fast generation of RFC4122(v4) UUIDs.",
  "url": "http://github.com/broofa/node-uuid",
  "keywords": [
    "uuid",
    "guid",
    "rfc4122"
  ],
  "author": {
    "name": "Robert Kieffer",
    "email": "robert@broofa.com"
  },
  "contributors": [],
  "dependencies": {},
  "lib": ".",
  "main": "./uuid.js",
  "version": "1.1.0",
  "readme": "# node-uuid\n\nSimple, fast generation of RFC4122[RFC4122(v4)](http://www.ietf.org/rfc/rfc4122.txt) UUIDS.  It runs in node.js and all major browsers.\n\n## Installation\n\n    npm install node-uuid\n\n### In browser\n\n    <script src=\"uuid.js\"></script>\n\n### In node.js\n\n    var uuid = require('node-uuid');\n\n## Usage\n\n### Generate a String UUID\n\n    var id = uuid(); // -> '92329D39-6F5C-4520-ABFC-AAB64544E172'\n\n### Generate a Binary UUID\n\n    // Simple form - allocates a Buffer/Array for you\n    var buf = uuid('binary');\n    // node.js -> <Buffer 08 50 05 c8 9c b2 4c 07 ac 07 d1 4f b9 f5 04 51>\n    // browser -> [8, 80, 5, 200, 156, 178, 76, 7, 172, 7, 209, 79, 185, 245, 4, 81]\n\n    // Provide your own Buffer or Array\n    var buf = new Array(16);\n    uuid('binary', buf); // -> [8, 80, 5, 200, 156, 178, 76, 7, 172, 7, 209, 79, 185, 245, 4, 81]\n    var buf = new Buffer(16);\n    uuid('binary', buf); // -> <Buffer 08 50 05 c8 9c b2 4c 07 ac 07 d1 4f b9 f5 04 51>\n\n    // Provide your own Buffer/Array, plus specify offset\n    // (e.g. here we fill an array with 3 uuids)\n    var buf = new Buffer(16 \\* 3);\n    uuid('binary', id, 0);\n    uuid('binary', id, 16);\n    uuid('binary', id, 32);\n\n## Testing\n\ntest/test.js generates performance data (similar to test/benchmark.js). It also verifies the syntax of 100K string UUIDs, and logs the distribution of hex digits found therein.  For example:\n\n    - - - Performance Data - - -\n    uuid(): 1052631 uuids/second\n    uuid('binary'): 680272 uuids/second\n    uuid('binary', buffer): 2702702 uuids/second\n\n    - - - Distribution of Hex Digits (% deviation from ideal) - - -\n    0 |================================| 187705 (0.11%)\n    1 |================================| 187880 (0.2%)\n    2 |================================| 186875 (-0.33%)\n    3 |================================| 186847 (-0.35%)\n    4 |==================================================| 287433 (-0.02%)\n    5 |================================| 187910 (0.22%)\n    6 |================================| 188172 (0.36%)\n    7 |================================| 187350 (-0.08%)\n    8 |====================================| 211994 (-0.24%)\n    9 |====================================| 212664 (0.08%)\n    A |=====================================| 213185 (0.32%)\n    B |=====================================| 212877 (0.18%)\n    C |================================| 187445 (-0.03%)\n    D |================================| 186737 (-0.41%)\n    E |================================| 187155 (-0.18%)\n    F |================================| 187771 (0.14%)\n\nNote that the increased values for 4 and 8-B are expected as part of the RFC4122 syntax (and are accounted for in the deviation calculation). BTW, if someone wants to do the calculation to determine what a statistically significant deviation would be, I'll gladly add that to the test.\n\n### In browser\n\n    Open test/test.html\n\n### In node.js\n\n    > node test/test.js\n\nnode.js users can also run the node-uuid .vs. uuid.js benchmark:\n\n    > node test/benchmark.js\n\n## Performance\n\n### In node.js\n\nnode-uuid is designed to be fast.  That said, the target platform is node.js, where it is screaming fast.  Here's what I get on my 2.66GHz Macbook Pro for the test/benchmark.js script:\n\n    nodeuuid(): 1126126 uuids/second\n    nodeuuid('binary'): 782472 uuids/second\n    nodeuuid('binary', buffer): 2688172 uuids/second\n    uuidjs(): 620347 uuids/second\n    uuidjs('binary'): 1275510 uuids/second\n\nThe uuidjs() entries are for Nikhil Marathe's [uuidjs module](https://bitbucket.org/nikhilm/uuidjs), and are provided for comparison.  uuidjs is a wrapper around the native libuuid library.\n\n### In browser\n\nnode-uuid performance varies dramatically across browsers.  For comprehensive test results, please [checkout the JSPerf tests](http://jsperf.com/node-uuid-performance).\n",
  "readmeFilename": "README.md",
  "_id": "node-uuid@1.1.0",
  "_from": "node-uuid@1.1.0"
}
