{
  "author": {
    "name": "Lloyd Hilaiel",
    "email": "lloyd@hilaiel.com",
    "url": "http://lloyd.io"
  },
  "name": "gobbledygook",
  "description": "A localization debugging tool that translates strings into legible gobbledygook.  In javascript.",
  "version": "0.0.3",
  "homepage": "https://github.com/lloyd/gobbledygook",
  "repository": {
    "type": "git",
    "url": "https://github.com/lloyd/gobbledygook.git"
  },
  "main": "./gobbledygook.js",
  "engines": {
    "node": ">=0.6.0"
  },
  "scripts": {
    "test": "node tests"
  },
  "readme": "## A tool for debugging of translations\n\n[![Build Status](https://secure.travis-ci.org/lloyd/gobbledygook.png)](http://travis-ci.org/lloyd/gobbledygook)\n\nThis project contains a node.js implementation of \"fake translation\",\nwhich makes it easier to debug the internationalization of software.\n\nThis project was inspired by the [Translate Toolkit](http://translate.sourceforge.net/wiki/toolkit/history).\n\n## Usage\n\n    npm install gobbledygook\n    $ node\n    > require('gobbledygook')('Hello World!');\n    '¡pʅɹoＭ oʅʅǝH'\n\n## What's it do?\n\nThis library can algorithmically \"translate\" your software.  The\ntranslation can be visually scanned to ensure that all user facing\nstrings are properly substituted with translations.\n\nOur fake translation is a right-to-left, inverted representation of\nenglish.  It uses several unicode characters which resemble 180 degree\nrotated versions of their counterparts, and make it look like all the\nstrings are upside down and backwards - you can still read it, but is \nis very clear what text is properly translated and what is not (suggesting\nan i18n bug).\n\nConcretely, we test a couple different things at once here:\n\n  1. rendering of R-T-L languages\n  2. string extraction / string markup\n  3. the substitution system and its ability to allow translators to reposition\n     things (like move the privacy policy before the terms and we still sub links right)\n\n## Some details\n\nThis implementation supports basic HTML markup, HTML entities, and substitution markers.\n\nBecause we directly use very simple html in strings we expose\nto translators, this thing has to understand very basic html.  Here's a concrete\nexample:\n\n  * **real** - Please close this window, <a %s>enable cookies</a> and try again\n  * **fake** - uıaƃa ʎɹʇ pua <a %s>sǝıʞooɔ ǝʅqauǝ</a> ´ʍopuıʍ sıɥʇ ǝsoʅɔ ǝsaǝʅԀ\n\nnotice that the text within the full sentence must be inverted, however HTML\ntags must not be.\n\nThis implementation handles substitution markers such as `%s` and\n`%(name)` in translatable strings as placeholders where dynamically\ngenerated content (links, email addresses, website names, etc) will be\nplaced.  Needless to say, if `%(cookieLink)` is translated to\n`)ʞuı⅂ǝıʞooɔ(%`, substitution will be broken.  This implementation\nrespects these types of markers, and is currently hardcoded to only\nthis style of substitution marker, but could be generalized.\n\n## The license\n\nhttp://wtfpl.org\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/lloyd/gobbledygook/issues"
  },
  "_id": "gobbledygook@0.0.3",
  "_from": "gobbledygook@0.0.3"
}
