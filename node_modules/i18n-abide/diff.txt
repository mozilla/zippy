diff --git a/README.md b/README.md
index 010c30a..6d5f466 100644
--- a/README.md
+++ b/README.md
@@ -9,26 +9,12 @@ This module **abides by the Mozilla L10n way of doing things**.
 
 # Status
 
-This module is under development, but frozen parts of it power the [Mozilla Persona](https://github.com/mozilla/browserid) service in 40+ languages.
+This module is under development, currently being extracted from [BrowserID](https://github.com/mozilla/browserid).
 
-# Tutorial
-
-Mozilla Hacks blog has a three part introduction.
-
-* [Localize Your Node.js Service](https://hacks.mozilla.org/2013/04/localize-your-node-js-service-part-1-of-3-a-node-js-holiday-season-part-9/)
-* [Localization community, tools & process](https://hacks.mozilla.org/2013/04/localization-community-tools-process-part-2-of-3-a-node-js-holiday-season-part-10/)
-* [Localization in Action](https://hacks.mozilla.org/2013/04/localization-in-action-part-3-of-3-a-node-js-holiday-season-part-11/)
-
-# Pre-requisites for Developers
-
-`npm install` has got your back
-
-# Pre-requisites for String Wranglers
+# Pre-requisites
 
 You should install Gnu gettext to get msginit, xgettext, and other tools.
 
-What is a string wrangler? A person or an automated build process that will merge and delete strings between releases.
-
 # Usage
 
     npm install i18n-abide
@@ -53,13 +39,6 @@ In your routes, you can use the gettext function in ``.js`` files.
       resp.render('home', {title: req.gettext("Hey, careful, man, there's a beverage here!")});
     };
 
-You can set locale in the scope of per-request instead of letting ``i18n-abide`` decide the locale for you. The following example shows how to set the locale of the request to ``zh_TW`` (Traditional Chinese): 
-
-    exports.homepage = function(req, resp) {
-      req.setLocale('zh_TW');
-      resp.render('home', {title: "my title"});
-    };
-
 In your layout files, you can add
 
     <!DOCTYPE html>
@@ -153,4 +132,4 @@ And we will compile ``.po`` files into ``.mo`` files.
 
 Now, start up your Node server and visit a page you've wrapped strings in Gettext...
 
-See docs/USAGE.md for full details.
+See docs/USAGE.md for full details.
\ No newline at end of file
diff --git a/bin/compile-json b/bin/compile-json
index 9e4c228..efa7875 100755
--- a/bin/compile-json
+++ b/bin/compile-json
@@ -27,12 +27,10 @@ for pofile in `find $1 -type f -name "*.po"`; do
     lang=`basename $subdir`
     stem=`basename $pofile .po`
     jsonfile="$2/${lang}/${stem}.json"
-    jsfile="$2/${lang}/${stem}.js"
     mkdir -p $2/${lang}
 
+    echo -n ";var json_locale_data = " > $jsonfile
     ./node_modules/.bin/po2json.js -p  $pofile >> $jsonfile
-    echo -n ";var json_locale_data = " > $jsfile
-    cat $jsonfile >> $jsfile
-    echo ";" >> $jsfile
+    echo ";" >> $jsonfile
 done
 rm $lockfile
diff --git a/bin/extract-pot b/bin/extract-pot
index de0e244..0b0fbaf 100755
--- a/bin/extract-pot
+++ b/bin/extract-pot
@@ -34,8 +34,11 @@ argv._.forEach(function (dir) {
 // top of repo is our current working directory
 process.chdir(path.dirname(__dirname));
 
+console.log('My Path is ', __dirname);
 var jsxGettextPath = path.join(__dirname, '../node_modules/.bin/jsxgettext');
 
+console.log(jsxGettextPath);
+
 var jsCmd = jsxGettextPath + ' %s --keyword=_ -L JS ' +
 '--output-dir=%s/templates/LC_MESSAGES --from-code=utf-8 --output=messages.pot ' +
 '`find %s -name \'*.js\' | grep -v node_modules | grep -v .git';
diff --git a/bin/merge-po.sh b/bin/merge-po.sh
index 4e89d84..6f1bc97 100755
--- a/bin/merge-po.sh
+++ b/bin/merge-po.sh
@@ -17,4 +17,18 @@ for lang in `find $1 -type f -name "*.po"`; do
     stem=`basename $lang .po`
     msgmerge -o ${dir}/${stem}.po.tmp ${dir}/${stem}.po $1/templates/LC_MESSAGES/${stem}.pot
     mv ${dir}/${stem}.po.tmp ${dir}/${stem}.po
-done
\ No newline at end of file
+done
+
+# Optionally auto-localize our test locale db-LB
+if hash podebug >/dev/null; then
+    # If your using client side gettext, add client to the list of cataglos on the next line
+    # for catalog in messages client; do
+    for catalog in messages; do
+
+        echo "Translating ${catalog}.po"
+        podebug --rewrite=flipped -i $1/templates/LC_MESSAGES/${catalog}.pot\
+               -o $1/db_LB/LC_MESSAGES/${catalog}.po
+    done
+else
+  echo 'Skipping db-LB, install translate-toolkit if you want to have that up-to-date.'
+fi
diff --git a/lib/i18n.js b/lib/i18n.js
index 288adc0..1832f80 100644
--- a/lib/i18n.js
+++ b/lib/i18n.js
@@ -31,7 +31,7 @@ var translations = {};
 var logger;
 
 // forward references
-var localeFrom, parseAcceptLanguage, bestLanguage, format, languageFrom;
+var localeFrom, parseAcceptLanguage, bestLanguage, format;
 
 /**
  * Connect middleware which is i18n aware.
@@ -48,7 +48,6 @@ var localeFrom, parseAcceptLanguage, bestLanguage, format, languageFrom;
  */
 exports.abide = function(options) {
   options = options || {};
-
   if (! options.gettext_alias)         options.gettext_alias = 'gettext';
   if (! options.supported_languages)   options.supported_languages = ['en-US'];
   if (! options.default_lang)          options.default_lang = 'en-US';
@@ -57,22 +56,35 @@ exports.abide = function(options) {
   if (! options.translation_directory) options.translation_directory = 'l18n/';
   if (! options.logger)                options.logger = console;
 
+  var existsSync = fs.existsSync || path.existsSync;
+
   logger = options.logger;
 
-  function json_file_path(locale) {
-    return path.resolve(path.join(__dirname, '..', '..', '..'),
-                        options.translation_directory,
-                        path.join(locale, 'messages.json'));
-  }
+  var json_file_path = function(locale) {
+        return path.resolve(
+             path.join(__dirname, '..', '..', '..'),
+                       options.translation_directory,
+                       path.join(locale, 'messages.json'));
+      },
+      debug_locale = localeFrom(options.debug_lang);
 
-  options.supported_languages.forEach(function(lang) {
+  options.supported_languages.forEach(function(lang, i) {
     var l = localeFrom(lang);
 
     // populate the in-memory translation cache with client.json, which contains
     // strings relevant on the server
     try {
+      // TODO: Have po2json write json files, not .js files
+      // also https://github.com/mozilla/i18n-abide/issues/15
       var rawMessages = fs.readFileSync(json_file_path(l)).toString();
-      translations[l] = JSON.parse(rawMessages).messages;
+      if (rawMessages.length < JS_PRE_LEN + JS_POST_LEN + 1) {
+        throw new Error('Bad Locale messages.json ' + l);
+      }
+      // Chop JSON out of the middle of a JavaScript formatted file
+      var json_locale_data = JSON.parse(
+        rawMessages.slice(JS_PRE_LEN, rawMessages.length - JS_POST_LEN));
+
+      translations[l] = json_locale_data.messages;
     } catch (e) {
       // an exception here means that there was a problem with the translation
       // files for this locale!
@@ -101,8 +113,8 @@ exports.abide = function(options) {
         gt;
 
     if (lang && lang.toLowerCase && lang.toLowerCase() === debug_lang) {
-      // What? http://www.youtube.com/watch?v=rJLnGjhPT1Q
-      lang = DAVID_B_LABYRN;
+        // What? http://www.youtube.com/watch?v=rJLnGjhPT1Q
+        lang = DAVID_B_LABYRN;
     }
     // Express 2 support
     if (!! resp.local) {
@@ -110,7 +122,7 @@ exports.abide = function(options) {
         if ('string' === typeof args) {
           resp.local(args, orValue);
         } else {
-          Object.keys(args).forEach(function(key) {
+          Object.keys(args).forEach(function(key, i) {
             resp.local(key, args[key]);
           });
         }
@@ -132,26 +144,6 @@ exports.abide = function(options) {
     locals.format = format;
     req.format = format;
 
-    locals.setLocale = function(assignedLocale) {
-      if (translations[assignedLocale]) {
-        locale = assignedLocale;
-
-        var newLocals = {}
-
-        newLocals.locale = assignedLocale;
-        req.locale = assignedLocale;
-
-        newLocals.lang = languageFrom(assignedLocale);
-        req.lang = newLocals.lang;
-
-        newLocals.lang_dir = BIDI_RTL_LANGS.indexOf(newLocals.lang) >= 0 ? 'rtl' : 'ltr';
-        req.lang_dir = newLocals.lang_dir;
-
-        resp.locals(newLocals);
-      }
-    };
-    req.setLocale = locals.setLocale;
-
     if (lang.toLowerCase() === DAVID_B_LABYRN.toLowerCase()) {
       gt = gobbledygook;
       locals.lang = DAVID_B_LABYRN;
@@ -164,7 +156,7 @@ exports.abide = function(options) {
       };
     } else {
       // default lang in a non gettext environment... fake it
-      gt = function(a) { return a; };
+      gt = function(a, b) { return a; };
     }
     locals[options.gettext_alias] =  gt;
     req.gettext = gt;
@@ -194,24 +186,24 @@ function qualityCmp(a, b) {
  * }
  */
 exports.parseAcceptLanguage = parseAcceptLanguage = function(header) {
-  // pl,fr-FR;q=0.3,en-US;q=0.1
-  if (! header || ! header.split) {
-    return [];
-  }
-  var raw_langs = header.split(',');
-  var langs = raw_langs.map(function(raw_lang) {
-    var parts = raw_lang.split(';');
-    var q = 1;
-    if (parts.length > 1 && parts[1].indexOf('q=') === 0) {
-      var qval = parseFloat(parts[1].split('=')[1]);
-      if (isNaN(qval) === false) {
-        q = qval;
-      }
+    // pl,fr-FR;q=0.3,en-US;q=0.1
+    if (! header || ! header.split) {
+      return [];
     }
-    return { lang: parts[0].trim(), quality: q };
-  });
-  langs.sort(qualityCmp);
-  return langs;
+    var raw_langs = header.split(',');
+    var langs = raw_langs.map(function(raw_lang) {
+      var parts = raw_lang.split(';');
+      var q = 1;
+      if (parts.length > 1 && parts[1].indexOf('q=') === 0) {
+          var qval = parseFloat(parts[1].split('=')[1]);
+          if (isNaN(qval) === false) {
+            q = qval;
+          }
+      }
+      return { lang: parts[0].trim(), quality: q };
+    });
+    langs.sort(qualityCmp);
+    return langs;
 };
 
 
@@ -241,7 +233,7 @@ exports.bestLanguage = bestLanguage = function(languages, supported_languages, d
  */
 exports.localeFrom = localeFrom = function(language) {
   if (! language || ! language.split) {
-    return "";
+      return "";
   }
   var parts = language.split('-');
   if (parts.length === 1) {
@@ -261,7 +253,7 @@ exports.localeFrom = localeFrom = function(language) {
 /**
  * Given a locale code, return a language code
  */
-exports.languageFrom = languageFrom = function(locale) {
+exports.languageFrom = function(locale) {
   if (!locale || !locale.split) {
     return "";
   }
diff --git a/package.json b/package.json
index 5a8c8a4..4d99bcb 100644
--- a/package.json
+++ b/package.json
@@ -2,7 +2,7 @@
   "author": "Austin King <shout@ozten.com> (http://ozten.com)",
   "name": "i18n-abide",
   "description": "Express/connect module for Node i18n and l10n support",
-  "version": "0.0.8",
+  "version": "0.0.8beta4",
   "homepage": "https://github.com/mozilla/i18n-abide",
   "repository": {
     "type": "git",
@@ -18,7 +18,7 @@
   "dependencies": {
     "async": "0.1.22",
     "gobbledygook": "0.0.3",
-    "jsxgettext": "0.1.3",
+    "jsxgettext": "0.0.4",
     "optimist": "0.3.4"
     },
   "devDependencies": {
