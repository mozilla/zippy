{
  "name": "client-sessions",
  "version": "0.4.1",
  "description": "secure sessions stored in cookies",
  "main": "lib/client-sessions",
  "repository": {
    "type": "git",
    "url": "https://github.com/mozilla/node-client-sessions"
  },
  "dependencies": {
    "cookies": "0.3.6",
    "node-proxy": "0.6.0"
  },
  "devDependencies": {
    "vows": "0.7.0",
    "express": "2.5.0",
    "tobi": "https://github.com/Cowboy-coder/tobi/tarball/fd733a3",
    "zombie": "1.4.1"
  },
  "author": {
    "name": "Ben Adida",
    "email": "ben@adida.net"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "licenses": {
    "type": "MPL 2.0",
    "url": "https://raw.github.com/mozilla/node-client-sessions/master/LICENSE"
  },
  "bugs": {
    "url": "https://github.com/mozilla/node-client-sessions/issues"
  },
  "readme": "[![build status](https://secure.travis-ci.org/mozilla/node-client-sessions.png)](http://travis-ci.org/mozilla/node-client-sessions)\n\nclient-sessions is connect middleware that implements sessions in encrypted tamper-free cookies.  For a complete introduction to encrypted client side sessions, refer to [Francois Marier's blog post on the subject][];\n\n[Francois Marier's blog post on the subject]: https://hacks.mozilla.org/2012/12/using-secure-client-side-sessions-to-build-simple-and-scalable-node-js-applications-a-node-js-holiday-season-part-3/\n\n**NOTE:** It is not recommended using both this middleware and connect's built-in session middleware.\n\n## Usage\n\nBasic usage:\n\n```js\nvar sessions = require(\"client-sessions\");\napp.use(sessions({\n  cookieName: 'mySession', // cookie name dictates the key name added to the request object\n  secret: 'blargadeeblargblarg', // should be a large unguessable string\n  duration: 24 * 60 * 60 * 1000, // how long the session will stay valid in ms\n  activeDuration: 1000 * 60 * 5 // if expiresIn < activeDuration, the session will be extended by activeDuration milliseconds\n}));\n\napp.use(function(req, res, next) {\n  if (req.mySession.seenyou) {\n    res.setHeader('X-Seen-You', 'true');\n  } else {\n    // setting a property will automatically cause a Set-Cookie response\n    // to be sent\n    req.mySession.seenyou = true;\n    res.setHeader('X-Seen-You', 'false');\n  }\n});\n```\n\nYou can control more specific cookie behavior during setup:\n\n```js\napp.use(sessions({\n  cookieName: 'mySession', // cookie name dictates the key name added to the request object\n  secret: 'blargadeeblargblarg', // should be a large unguessable string\n  duration: 24 * 60 * 60 * 1000, // how long the session will stay valid in ms\n  cookie: {\n    path: '/api', // cookie will only be sent to requests under '/api'\n    maxAge: 60000, // duration of the cookie in milliseconds, defaults to duration above\n    ephemeral: false, // when true, cookie expires when the browser closes\n    httpOnly: true, // when true, cookie is not accessible from javascript\n    secure: false   // when true, cookie will only be sent over SSL\n  }\n}));\n```\n\nYou can have multiple cookies:\n\n```js\n// a 1 week session\napp.use(sessions({\n  cookieName: 'shopping_cart',\n  secret: 'first secret',\n  duration: 7 * 24 * 60 * 60 * 1000\n}));\n\n// a 2 hour encrypted session\napp.use(sessions({\n  cookieName: 'authenticated',\n  secret: 'first secret',\n  duration: 2 * 60 * 60 * 1000\n}));\n```\n\nIn this example, there's a 2 hour authentication session, but shopping carts persist for a week.\n\nFinally, you can use requestKey to force the name where information can be accessed on the request object.\n\n```js\nvar sessions = require(\"client-sessions\");\napp.use(sessions({\n  cookieName: 'mySession',\n  requestKey: 'forcedSessionKey', // requestKey overrides cookieName for the key name added to the request object.\n  secret: 'blargadeeblargblarg', // should be a large unguessable string\n  duration: 24 * 60 * 60 * 1000, // how long the session will stay valid in ms\n}));\n\napp.use(function(req, res, next) {\n  // requestKey forces the session information to be\n  // accessed via forcedSessionKey\n  if (req.forcedSessionKey.seenyou) {\n    res.setHeader('X-Seen-You', 'true');\n  }\n  next();\n});\n```\n\n## License\n\n> This Source Code Form is subject to the terms of the Mozilla Public\n> License, v. 2.0. If a copy of the MPL was not distributed with this\n> file, You can obtain one at http://mozilla.org/MPL/2.0/.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mozilla/node-client-sessions",
  "_id": "client-sessions@0.4.1",
  "_from": "client-sessions@0.4.1"
}
