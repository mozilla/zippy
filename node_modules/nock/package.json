{
  "name": "nock",
  "description": "HTTP Server mocking for Node.js",
  "tags": [
    "Mock",
    "HTTP",
    "testing",
    "isolation"
  ],
  "version": "0.27.1",
  "author": {
    "name": "Pedro Teixeira",
    "email": "pedro.teixeira@gmail.com"
  },
  "contributors": [
    {
      "name": "Roly Fentanes"
    },
    {
      "name": "Alexander Simmerl"
    },
    {
      "name": "Pedro Teixeira"
    },
    {
      "name": "Nuno Job"
    },
    {
      "name": "Ian Young"
    },
    {
      "name": "nilsbunger"
    },
    {
      "name": "bacchusrx",
      "email": "bacchusrx@eightstar.ca"
    },
    {
      "name": "Fabiano França"
    },
    {
      "name": "Sascha Drews"
    },
    {
      "name": "Mike Swift"
    },
    {
      "name": "James Herdman"
    },
    {
      "name": "David Björklund"
    },
    {
      "name": "Andrew Kramolisch"
    },
    {
      "name": "Balazs Nagy"
    },
    {
      "name": "Brian J Brennan"
    },
    {
      "name": "Attila Incze"
    },
    {
      "name": "Mac Angell"
    },
    {
      "name": "Tom Hosford"
    },
    {
      "name": "Aurélien Thieriot"
    },
    {
      "name": "Alex Zylman"
    },
    {
      "name": "Celestino Gomes",
      "email": "contact@tinogomes.com"
    },
    {
      "name": "David Rousselie"
    },
    {
      "name": "spenceralger"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/pgte/nock.git"
  },
  "bugs": {
    "url": "http://github.com/pgte/nock/issues"
  },
  "engines": [
    "node >= 0.4.10"
  ],
  "main": "./index",
  "dependencies": {
    "propagate": "0.2.x"
  },
  "devDependencies": {
    "tap": "*",
    "request": "*",
    "superagent": "~0.15.7"
  },
  "scripts": {
    "test": "node node_modules/tap/bin/tap.js tests"
  },
  "license": "MIT",
  "readme": "# Nock [![Build Status](https://secure.travis-ci.org/pgte/nock.png)](http://travis-ci.org/pgte/nock)\n\nNock is an HTTP mocking and expectations library for Node.js\n\nNock can be used to test modules that perform HTTP requests in isolation.\n\nFor instance, if a module performs HTTP requests to a CouchDB server or makes HTTP requests to the Amazon API, you can test that module in isolation.\n\n# Install\n\n```sh\n$ npm install nock\n```\n\n# Use\n\nOn your test, you can setup your mocking object like this:\n\n```js\nvar nock = require('nock');\n\nvar couchdb = nock('http://myapp.iriscouch.com')\n                .get('/users/1')\n                .reply(200, {\n                  _id: '123ABC',\n                  _rev: '946B7D1C',\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com'\n                 });\n```\n\nThis setup says that we will intercept every HTTP call to `http://myapp.iriscouch.com`.\n\nIt will intercept an HTTP GET request to '/users/1' and reply with a status 200, and the body will contain a user representation in JSON.\n\nThen the test can call the module, and the module will do the HTTP requests.\n\n## READ THIS\n\nWhen you setup an interceptor for an URL and that interceptor is used, it is removed from the interceptor list.\nThis means that you can intercept 2 or more calls to the same URL and return different things on each of them.\nIt also means that you must setup one interceptor for each request you are going to have, otherwise nock will throw an error because that URL was not present in the interceptor list.\n\n## Specifying request body\n\nYou can specify the request body to be matched as the second argument to the `get`, `post`, `put` or `delete` specifications like this:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n                .post('/users', {\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com'\n                })\n                .reply(201, {\n                  ok: true,\n                  id: '123ABC',\n                  rev: '946B7D1C'\n                });\n```\n\nThe request body can be a string or a JSON object.\n\n## Specifying replies\n\nYou can specify the return status code for a path on the first argument of reply like this:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n                .get('/users/1')\n                .reply(404);\n```\n\nYou can also specify the reply body as a string:\n\n```js\nvar scope = nock('http://www.google.com')\n                .get('/')\n                .reply(200, 'Hello from Google!');\n```\n\nor as a JSON-encoded object:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n                .get('/')\n                .reply(200, {\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com',\n                  _id: '4324243fsd'\n                });\n```\n\nor even as a file:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n                .get('/')\n                .replyWithFile(200, __dirname + '/replies/user.json');\n```\n\nInstead of an object or a buffer you can also pass in a callback to be evaluated for the value of the response body:\n\n```js\nvar scope = nock('http://www.google.com')\n   .filteringRequestBody(/.*/, '*')\n   .post('/echo', '*')\n   .reply(201, function(uri, requestBody) {\n     return requestBody;\n   });\n```\n\n\nA Stream works too:\n```js\nvar scope = nock('http://www.google.com')\n   .get('/cat-poems')\n   .reply(200, function(uri, requestBody) {\n     return fs.createReadStream('cat-poems.txt');\n   });\n```\n\n\n### Specifying Reply Headers\n\nYou can specify the reply headers like this:\n\n```js\nvar scope = nock('http://www.headdy.com')\n   .get('/')\n   .reply(200, 'Hello World!', {\n     'X-My-Headers': 'My Header value'\n   });\n```\n\n### Default Reply Headers\n\nYou can also specify default reply headers for all responses like this:\n\n```js\nvar scope = nock('http://www.headdy.com')\n  .defaultReplyHeaders({\n    'X-Powered-By': 'Rails',\n    'Content-Type': 'application/json'\n  })\n  .get('/')\n  .reply(200, 'The default headers should come too');\n```\n\n## HTTP Verbs\n\nNock supports any HTTP verb, and it has convenience methods for the GET, POST, PUT, HEAD, DELETE, PATCH and MERGE HTTP verbs.\n\nYou can intercept any HTTP verb using `.intercept(path, verb [, requestBody [, options]])`:\n\n```js\nscope('http://my.domain.com')\n  .intercept('/path', 'PATCH')\n  .reply(304);\n```\n\n## Support for HTTP and HTTPS\n\nBy default nock assumes HTTP. If you need to use HTTPS you can specify the `https://` prefix like this:\n\n```js\nvar scope = nock('https://secure.my.server.com')\n   // ...\n```\n\n## Non-standard ports\n\nYou are able to specify a non-standard port like this:\n\n```js\nvar scope = nock('http://my.server.com:8081')\n  ...\n```\n\n## Repeat response n times\n\nYou are able to specify the number of times to repeat the same response.\n\n```js\nnock('http://zombo.com').get('/').times(4).reply(200, 'Ok');\n\nhttp.get('http://zombo.com/'); // respond body \"Ok\"\nhttp.get('http://zombo.com/'); // respond body \"Ok\"\nhttp.get('http://zombo.com/'); // respond body \"Ok\"\nhttp.get('http://zombo.com/'); // respond body \"Ok\"\nhttp.get('http://zombo.com/'); // respond with zombo.com result\n```\n\nSugar sintaxe\n\n```js\nnock('http://zombo.com').get('/').once().reply(200, 'Ok');\nnock('http://zombo.com').get('/').twice().reply(200, 'Ok');\nnock('http://zombo.com').get('/').thrice().reply(200, 'Ok');\n```\n\n## Delay the response\n\nYou are able to specify the number of milliseconds that your reply should be delayed.\n\n```js\nnock('http://my.server.com')\n  .get('/')\n  .delay(2000) // 2 seconds\n  .reply(200, '<html></html>')\n```\n\nNOTE: the [`'response'`](http://nodejs.org/api/http.html#http_event_response) event will occur immediately, but the [IncomingMessage](http://nodejs.org/api/http.html#http_http_incomingmessage) not emit it's `'end'` event until after the delay.\n\n## Chaining\n\nYou can chain behaviour like this:\n\n```js\nvar scope = nock('http://myapp.iriscouch.com')\n                .get('/users/1')\n                .reply(404)\n                .post('/users', {\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com'\n                })\n                .reply(201, {\n                  ok: true,\n                  id: '123ABC',\n                  rev: '946B7D1C'\n                })\n                .get('/users/123ABC')\n                .reply(200, {\n                  _id: '123ABC',\n                  _rev: '946B7D1C',\n                  username: 'pgte',\n                  email: 'pedro.teixeira@gmail.com'\n                });\n```\n\n## Path filtering\n\nYou can also filter the URLs based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your URL.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .filteringPath(/password=[^&]*/g, 'password=XXX')\n                .get('/users/1?password=XXX')\n                .reply(200, 'user');\n```\n\nOr you can use a function:\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .filteringPath(function(path) {\n                   return '/ABC';\n                 })\n                .get('/ABC')\n                .reply(200, 'user');\n```\n\n## Request Body filtering\n\nYou can also filter the request body based on a function.\n\nThis can be useful, for instance, if you have random or time-dependent data in your request body.\n\nYou can use a regexp for replacement, just like String.prototype.replace:\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .filteringRequestBody(/password=[^&]*/g, 'password=XXX')\n                .post('/users/1', 'data=ABC&password=XXX')\n                .reply(201, 'OK');\n```\n\nOr you can use a function:\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .filteringRequestBody(function(path) {\n                   return 'ABC';\n                 })\n                .post('/', 'ABC')\n                .reply(201, 'OK');\n```\n\n## Request Headers Matching\n\nIf you need to match requests only if certain request headers match, you can.\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .matchHeader('accept', 'application/json')\n                .get('/')\n                .reply(200, {\n                  data: 'hello world'\n                })\n```\n\nYou can also use a regexp for the header body.\n\n```js\nvar scope = nock('http://api.myservice.com')\n                .matchHeader('User-Agent', /Mozilla\\/.*/)\n                .get('/')\n                .reply(200, {\n                  data: 'hello world'\n                })\n```\n\n## Allow __unmocked__ requests on a mocked hostname\n\nIf you need some request on the same host name to be mocked and some others to **really** go through the HTTP stack, you can use the `allowUnmocked` option like this:\n\n```js\noptions = {allowUnmocked: true};\nvar scope = nock('http://my.existing.service.com', options)\n  .get('/my/url')\n  .reply(200, 'OK!');\n\n // GET /my/url => goes through nock\n // GET /other/url => actually makes request to the server\n```\n\n# Expectations\n\nEvery time an HTTP request is performed for a scope that is mocked, Nock expects to find a handler for it. If it doesn't, it will throw an error.\n\nCalls to nock() return a scope which you can assert by calling `scope.done()`. This will assert that all specified calls on that scope were performed.\n\nExample:\n\n```js\nvar google = nock('http://google.com')\n                .get('/')\n                .reply(200, 'Hello from Google!');\n\n// do some stuff\n\nsetTimeout(function() {\n  google.done(); // will throw an assertion error if meanwhile a \"GET http://google.com\" was not performed.\n}, 5000);\n```\n\n## .isDone()\n\nYou can also call `isDone()`, which will return a boolean saying if all the expectations are met or not (instead of throwing an exception);\n\n## .cleanAll()\n\nYou can cleanup all the prepared mocks (could be useful to cleanup some state after a failed test) like this:\n\n```js\nnock.cleanAll();\n```\n## .persist()\n\nYou can make all the interceptors for a scope persist by calling `.persist()` on it:\n\n```js\nvar scope = nock('http://persisssists.con')\n  .persist()\n  .get('/')\n  .reply(200, 'Persisting all the way');\n```\n\n## pendingMocks\n\nIf a scope is not done, you can inspect the scope to infer which ones are still pending using the `scope.pendingMocks` property:\n\n```js\nif (!scope.isDone()) {\n  console.error('pending mocks: %j', scope.pendingMocks);\n}\n```\n\n# Logging\n\nNock can log matches if you pass in a log function like this:\n\n```js\nvar google = nock('http://google.com')\n                .log(console.log)\n                ...\n```\n\n# Restoring\n\nYou can restore the HTTP interceptor to the normal unmocked behaviour by calling:\n\n```js\nnock.restore();\n```\n\n# Turning Nock Off (experimental!)\n\nYou can bypass Nock completely by setting `NOCK_OFF` environment variable to `\"true\"`.\n\nThis way you can have your tests hit the real servers just by switching on this environment variable.\n\n```js\n$ NOCK_OFF=true node my_test.js\n```\n\n# Enable/Disable real HTTP request\n\nAs default, if you do not mock a host, a real HTTP request will do, but sometimes you should not permit real HTTP request, so...\n\nFor disable real http request.\n\n```js\nnock.disableNetConnect();\n```\n\nSo, if you try to request any host not 'nocked', it will thrown an NetConnectNotAllowedError.\n\n```js\nnock.disableNetConnect();\nhttp.get('http://google.com/');\n// this code throw NetConnectNotAllowedError with message:\n// Nock: Not allow net connect for \"google.com:80\"\n```\n\nFor enabled real HTTP requests.\n\n```js\nnock.enableNetConnect();\n```\n\nYou could restrict real HTTP request...\n\n```js\n// using a string\nnock.enableNetConnect('amazon.com');\n\n// or a RegExp\nnock.enableNetConnect(/(amazon|github).com/);\n\nhttp.get('http://www.amazon.com/');\nhttp.get('http://github.com/'); // only for second example\n\n// This request will be done!\nhttp.get('http://google.com/');\n// this will throw NetConnectNotAllowedError with message:\n// Nock: Not allow net connect for \"google.com:80\"\n```\n\n# Recording\n\nThis is a cool feature:\n\nGuessing what the HTTP calls are is a mess, specially if you are introducing nock on your already-coded tests.\n\nFor these cases where you want to mock an existing live system you can record and playback the HTTP calls like this:\n\n```js\nnock.recorder.rec();\n// Some HTTP calls happen and the nock code necessary to mock\n// those calls will be outputted to console\n```\n\nIf you just want to capture the generated code into a var as an array you can use:\n\n```js\nnock.recorder.rec(true); // :no_output = true\n// ... some HTTP calls\nvar nockCalls = nock.recorder.play();\n```\n\nThe `nockCalls` var will contain an array of strings representing the generated code you need.\n\nCopy and paste that code into your tests, customize at will, and you're done!\n\n(Remember that you should do this one test at a time).\n\n# How does it work?\n\nNock works by overriding Node's `http.request` function. Also, it overrides `http.ClientRequest` too to cover for modules that use it directly.\n\n# PROTIP\n\nIf you don't want to match the request body you can use this trick (by @theycallmeswift):\n\n```js\nvar scope = nock('http://api.myservice.com')\n  .filteringRequestBody(function(path) {\n    return '*';\n  })\n  .post('/some_uri', '*')\n  .reply(200, 'OK');\n```\n\n# License\n\n(The MIT License)\n\nCopyright (c) 2011 Pedro Teixeira. http://about.me/pedroteixeira\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/pgte/nock",
  "_id": "nock@0.27.1",
  "_from": "nock@~0.27.1"
}
