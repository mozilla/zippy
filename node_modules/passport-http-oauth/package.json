{
  "name": "passport-http-oauth",
  "version": "0.1.3",
  "description": "HTTP OAuth authentication strategy for Passport.",
  "keywords": [
    "passport",
    "http",
    "oauth",
    "authn",
    "authentication",
    "authz",
    "authorization",
    "api"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jaredhanson/passport-http-oauth.git"
  },
  "bugs": {
    "url": "http://github.com/jaredhanson/passport-http-oauth/issues"
  },
  "author": {
    "name": "Jared Hanson",
    "email": "jaredhanson@gmail.com",
    "url": "http://www.jaredhanson.net/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/passport-http-oauth",
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport": "~0.1.11"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "scripts": {
    "test": "NODE_PATH=lib node_modules/.bin/vows test/*-test.js test/**/*-test.js"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "# Passport-HTTP-OAuth\n\nHTTP OAuth authentication strategy for [Passport](https://github.com/jaredhanson/passport).\n\nThis module lets you authenticate HTTP requests using the authorization scheme\ndefined by the [OAuth](http://tools.ietf.org/html/rfc5849) 1.0 protocol.  OAuth\nis typically used protect API endpoints, including endpoints defined by the\nOAuth protocol itself, as well as other endpoints exposed by the server.\n\nBy plugging into Passport, OAuth API authentication can be easily and\nunobtrusively integrated into any application or framework that supports [Connect](http://www.senchalabs.org/connect/)-style\nmiddleware, including [Express](http://expressjs.com/).\n\nNote that this strategy provides support for implementing OAuth as a service\nprovider.  If your application is implementing OAuth as a client for delegated\nauthentication (for example, using [Facebook](https://github.com/jaredhanson/passport-facebook)\nor [Twitter](https://github.com/jaredhanson/passport-twitter)), please see\n[Passport-OAuth](https://github.com/jaredhanson/passport-oauth) for the\nappropriate strategy.\n\n## Install\n\n    $ npm install passport-http-oauth\n\n## Usage of Consumer Strategy\n\n#### Configure Strategy\n\nThe OAuth consumer authentication strategy authenticates consumers based on a\nconsumer key and secret (and optionally a temporary request token and secret).\nThe strategy requires a `consumer` callback, `token` callback, and `validate`\ncallback.  The secrets supplied by the `consumer` and `token` callbacks are used\nto compute a signature, and authentication fails if it does not match the\nrequest signature.  `consumer` as supplied by the `consumer` callback is the\nauthenticating entity of this strategy, and will be set by Passport at\n`req.user`.\n\n    passport.use('consumer', new ConsumerStrategy(\n      function(consumerKey, done) {\n        Consumer.findByKey({ key: consumerKey }, function (err, consumer) {\n          if (err) { return done(err); }\n          if (!consumer) { return done(null, false); }\n          return done(null, consumer, consumer.secret);\n        });\n      },\n      function(requestToken, done) {\n        RequestToken.findOne(requestToken, function (err, token) {\n          if (err) { return done(err); }\n          if (!token) { return done(null, false); }\n          // third argument is optional info.  typically used to pass\n          // details needed to authorize the request (ex: `verifier`)\n          return done(null, token.secret, { verifier: token.verifier });\n        });\n      },\n      function(timestamp, nonce, done) {\n        // validate the timestamp and nonce as necessary\n        done(null, true)\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'consumer'` strategy, to\nauthenticate requests.  This strategy is intended for use in the request token\nand access token API endpoints, so the `session` option can be set to `false`.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.post('/access_token', \n      passport.authenticate('consumer', { session: false }),\n      oauthorize.accessToken(\n        // ...\n      });\n\n## Usage of Token Strategy\n\n#### Configure Strategy\n\nThe OAuth token authentication strategy authenticates users based on an\naccess token issued to a consumer.  The strategy requires a `consumer` callback,\n`verify` callback, and `validate` callback.  The secrets supplied by the\n`consumer` and `verify` callbacks are used to compute a signature, and\nauthentication fails if it does not match the request signature.  `user` as\nsupplied by the `verify` callback is the authenticating entity of this strategy,\nand will be set by Passport at `req.user`.\n\n    passport.use('token', new TokenStrategy(\n      function(consumerKey, done) {\n        Consumer.findByKey({ key: consumerKey }, function (err, consumer) {\n          if (err) { return done(err); }\n          if (!consumer) { return done(null, false); }\n          return done(null, consumer, consumer.secret);\n        });\n      },\n      function(accessToken, done) {\n        AccessToken.findOne(accessToken, function (err, token) {\n          if (err) { return done(err); }\n          if (!token) { return done(null, false); }\n          Users.findOne(token.userId, function(err, user) {\n            if (err) { return done(err); }\n            if (!user) { return done(null, false); }\n            // fourth argument is optional info.  typically used to pass\n            // details needed to authorize the request (ex: `scope`)\n            return done(null, user, token.secret, { scope: token.scope });\n          });\n        });\n      },\n      function(timestamp, nonce, done) {\n        // validate the timestamp and nonce as necessary\n        done(null, true)\n      }\n    ));\n    \n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'token'` strategy, to\nauthenticate requests.  This strategy is intended for use in protected API\nendpoints, so the `session` option can be set to `false`.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/api/userinfo', \n      passport.authenticate('token', { session: false }),\n      function(req, res) {\n        res.json(req.user);\n      });\n\n## Combine with OAuthorize\n\n[OAuthorize](https://github.com/jaredhanson/oauthorize) is a toolkit for\nimplementing OAuth service providers.  It bundles a suite of middleware\nimplementing the request token, access token, and user authorization endpoints\nof the OAuth 1.0 protocol.\n\nThis middleware, combined with the `ConsumerStrategy` and a user authentication\nstrategy can be used to implement the complete OAuth flow, issuing access tokens\nto consumers.  `TokenStrategy` can then be used to protect API endpoints using\nthe access tokens issued.\n\n## Examples\n\nThe [example](https://github.com/jaredhanson/oauthorize/tree/master/examples/express2)\nincluded with [OAuthorize](https://github.com/jaredhanson/oauthorize)\ndemonstrates how to implement a complete OAuth service provider.\n`ConsumerStrategy` is used to authenticate clients as they request tokens from\nthe request token and access token endpoints.  `TokenStrategy` is used to\nauthenticate users and clients making requests to API endpoints.\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n[![Build Status](https://secure.travis-ci.org/jaredhanson/passport-http-oauth.png)](http://travis-ci.org/jaredhanson/passport-http-oauth)\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2012-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jaredhanson/passport-http-oauth",
  "_id": "passport-http-oauth@0.1.3",
  "_from": "passport-http-oauth@0.1.3"
}
