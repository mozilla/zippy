{
  "name": "gettext-parser",
  "description": "Parse and compile gettext po and mo files to/from json, nothing more, nothing less",
  "version": "0.1.10",
  "author": {
    "name": "Andris Reinman"
  },
  "homepage": "http://github.com/andris9/gettext-parser",
  "repository": {
    "type": "git",
    "url": "http://github.com/andris9/gettext-parser.git"
  },
  "scripts": {
    "test": "nodeunit test/"
  },
  "main": "./index",
  "license": "MIT",
  "dependencies": {
    "encoding": "~0.1",
    "iconv": "*"
  },
  "optionalDependencies": {
    "iconv": "*"
  },
  "devDependencies": {
    "nodeunit": "*"
  },
  "keywords": [
    "i18n",
    "l10n",
    "gettext",
    "mo",
    "po"
  ],
  "readme": "gettext-parser\n==============\n\n[![Build Status](https://secure.travis-ci.org/andris9/gettext-parser.png)](http://travis-ci.org/andris9/gettext-parser)\n[![NPM version](https://badge.fury.io/js/gettext-parser.png)](http://badge.fury.io/js/gettext-parser)\n\nParse and compile gettext *po* and *mo* files with node.js, nothing more, nothing less.\n\nThis module is slightly based on my other gettext related module [node-gettext](https://github.com/andris9/node-gettext). The plan is to move all parsing and compiling logic from node-gettext to here and leave only translation related functions (domains, plural handling, lookups etc.). \n\nIf you get a bunchload of warnings or (non fatal) errors when installing, it is ok. These are most probably generated by the optional iconv dependency.\n\n## Usage\n\nInclude the library:\n\n    var gettextParser = require(\"gettext-parser\");\n\nAvailable methods:\n\n  * `gettextParser.po.parse(buf[, defaultCharset])` where `buf` is a *po* file as a Buffer or an unicode string. `defaultCharset` is the charset to use if charset is not defined or is the default `\"CHARSET\"`. Returns gettext-parser specific translation object (see below)\n  * `gettextParser.po.compile(obj)` where `obj` is a translation object, returns a *po* file as a Buffer  \n  * `gettextParser.mo.parse(buf[, defaultCharset])` where `buf` is a *mo* file as a Buffer (*mo* is binary format, so do not use strings). `defaultCharset` is the charset to use if charset is not defined or is the default `\"CHARSET\"`. Returns translation object\n  * `gettextParser.mo.compile(obj)` where `obj` is a translation object, returns a *mo* file as a  Buffer\n\n**NB** if you are compiling a previously parsed translation object, you can override the output charset with the `charset` property (applies both for compiling *mo* and *po* files).\n\n    var obj = gettextParser.po.parse(inputBuf);\n    obj.charset = \"windows-1257\";\n    outputBuf = gettextParser.po.compile(obj);\n\nHeaders for the output are modified to match the updated charset.\n\n## Data structure of parsed mo/po files\n\n### Character set\n\nThe data is always in unicode but the original charset of the file can\nbe found from the `charset` property.\n\n### Headers\n\nHeaders can be found from the `headers` object, all keys are lowercase and the value for a key is a string. This value will also be used when compiling.\n\n### Translations\n\nTranslations can be found from the `translations` object which in turn holds context objects for `msgctx`. Default context can be found from `translations[\"\"]`.\n\nContext objects include all the translations, where `msgid` value is the key. The value is an object with the following possible properties:\n\n  * **msgctx** context for this translation, if not present the default context applies\n  * **msgid** string to be translated\n  * **msgid_plural** the plural form of the original string (might not be present)\n  * **msgstr** an array of translations\n  * **comments** an object with the following properties: `translator`, `reference`, `extracted`, `flag`, `previous`. \n\nExample\n\n```json\n{\n\t\"charset\": \"iso-8859-1\",\n\n    \"headers\": {\n        \"content-type\": \"text/plain; charset=iso-8859-1\",\n        \"plural-forms\": \"nplurals=2; plural=(n!=1);\"\n    },\n\n    \"translations\":{\n    \t\"\": {\n\t\t\t\"\": {\n                \"msgid\": \"\",\n                \"msgstr\": [\"Content-Type: text/plain; charset=iso-8859-1\\n...\"]\n\t\t\t}\n\t\t},\n\n    \t\"another context\":{\n\t\t\t\"%s example\":{\n\t\t\t\t\"msgctx\": \"another context\",\n\t\t\t\t\"msgid\": \"%s example\",\n\t\t\t\t\"msgid_plural\": \"%s examples\", \n\t\t\t\t\"msgstr\": [\"% näide\", \"%s näidet\"],\n\t\t\t\t\"comments\": {\n\t\t\t\t\t\"translator\": \"This is regular comment\",\n\t\t\t\t\t\"reference\": \"/path/to/file:123\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n}\n```\n\nNotice that the structure has both a `headers` object and a `\"\"` translation with the header string. When compiling the structure to a *mo* or a *po* file, the `headers` object is used to define the header. Header string in the `\"\"` translation is just for reference (includes the original unmodified data) but will not be used when compiling. So if you need to add or alter header values, use only the `headers` object.\n\n## License\n\n**MIT**\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andris9/gettext-parser/issues"
  },
  "_id": "gettext-parser@0.1.10",
  "_from": "gettext-parser@0.1.10"
}
