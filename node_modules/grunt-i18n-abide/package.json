{
  "name": "grunt-i18n-abide",
  "description": "Grunt plugin for running jsxgettext against your codebase.",
  "version": "0.0.3",
  "homepage": "https://github.com/muffinresearch/grunt-i18n-abide",
  "author": {
    "name": "Stuart Colville",
    "email": "scolville@mozilla.com",
    "url": "https://muffinresearch.co.uk/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/muffinresearch/grunt-i18n-abide.git"
  },
  "bugs": {
    "url": "https://github.com/muffinresearch/grunt-i18n-abide/issues"
  },
  "licenses": [
    {
      "type": "MPL 2.0",
      "url": "http://www.mozilla.org/MPL/2.0/"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "jsxgettext": "~0.3.2",
    "shelljs": "~0.2.6",
    "po2json": "0.0.6"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "l10n",
    "i18n",
    "i18n-abide",
    "gettext"
  ],
  "readme": "[![Build Status](https://travis-ci.org/muffinresearch/grunt-i18n-abide.png?branch=master)](https://travis-ci.org/muffinresearch/grunt-i18n-abide)\n\n# grunt-i18n-abide\n\n> Grunt plugin for running `jsxgettext` and `gettext` tools against your codebase. `jsxgettext` extracts strings from your JS\nand template files (EJS/Jinja (nunjucks)) to a pot format.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-i18n-abide --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-i18n-abide');\n```\n\n## The tasks\n\n* abideExtract\n* abideCreate\n* abideMerge\n* abideCompile\n\n## The `abideExtract` task\n\n### Overview\nIn your project's Gruntfile, add a section named `abideExtract` to the data object passed into `grunt.initConfig()`.\n\nThis example show two targets for extracting strings from JS and HTML. They both use the same destination.\n\n```js\n  abideExtract: {\n    js: {\n      src: 'lib/**/*.js',\n      dest: 'locale/templates/LC_MESSAGES/messages.pot',\n      options: {\n        language: 'JavaScript',\n      }\n    },\n    html: {\n      src: 'templates/**/*.html',\n      dest: 'locale/templates/LC_MESSAGES/messages.pot',\n      options: {\n        language: 'Jinja',\n      }\n    },\n  }\n```\n\n### Files\n\n#### src\nStandard grunt files src config allowing a set of paths to make up the list of files that are searched for gettext strings.\n\n#### dest\nStandard grunt files dest config allowing configuration of where the pot file should be created.\nDefault value: `locale/templates/LC\\_MESSAGES/messages.pot`\n\n### Options\n\n#### options.join\nType: `Boolean`\nDefault value: `true`\n\nJoin messages that already exist.\n\n#### options.keyword\nType: `String`\n\nA way to specify what gettext function you are using e.g. '_' for _('Translate this')\n\n#### options.language\nType: `String`\nDefault value: `'JavaScript'`\n\nA string value to tell `jsxgettext` what type of code you are extracting strings from.\n\n## The `abideCreate` task\n\n### Overview\nIn your project's Gruntfile, add a section named `abideCreate` to the data object passed into `grunt.initConfig()`.\n\n### Options\n```js\n  abideCreate: {\n    default: { // Target name.\n      options: {\n        template: 'locale/templates/LC_MESSAGES/messages.pot', // (default: 'locale/templates/LC_MESSAGES/messages.pot')\n        locales: ['en_US', 'fr', 'es'],\n        localeDir: 'locale',\n      }\n    }\n  },\n```\n\n### Options\n\n#### options.template\nType: `String`\nDefault value: `locale/templates/LC\\_MESSAGES/messages.pot`\n\nThe path to the template pot file strings are extracted to.\n\n#### options.locales\nType: `Array`\n\nA list of the locales you want to create.\n\n#### options.template\nType: `String`\nDefault value: `locale`\n\nThe base locale directory.\n\n\n## The `abideMerge` task\n\n### Overview\nIn your project's Gruntfile, add a section named `abideMerge` to the data object passed into `grunt.initConfig()`.\n\nThis command merges newly extracted strings into the locales.\n\n### Options\n```js\n  abideMerge: {\n    default: { // Target name.\n      options: {\n        template: 'locale/templates/LC_MESSAGES/messages.pot', // (default: 'locale/templates/LC_MESSAGES/messages.pot')\n        localeDir: 'locale',\n      }\n    }\n  },\n```\n\n### Options\n\n#### options.template\nType: `String`\nDefault value: `locale/templates/LC\\_MESSAGES/messages.pot`\n\nThe path to the template pot file strings are extracted to.\n\n#### options.localeDir\nType: `String`\nDefault value: `locale`\n\nThe base locale directory.\n\n\n## The `abideCompile` task\n\n### Overview\nIn your project's Gruntfile, add a section named `abideCompile` to the data object passed into `grunt.initConfig()`.\n\nThis command can take multiple targets, so you can compile more than one set of files if you want or a mix of mo/JSON.\n\n### Example Conf\n```js\n  abideCompile: {\n    json: {\n      dest: '/json/',\n      options: {\n        type: 'json',\n        localeDir: 'tests/tmp',\n      }\n    },\n    mo: {\n      options: {\n        type: 'mo',\n        localeDir: 'tests/tmp',\n      }\n    }\n  },\n```\n\n### Files\n\n#### dest\nStandard grunt files dest config allowing configuration of where the json should end up.\n\n### Options\n\n#### options.type\nType: `String`\n\nThe type of compilation `mo` or `json`\n\n#### options.localeDir\nType: `String`\nDefault value: `locale`\n\nThe base locale directory.\n\n\n## A complete configuration example\n\n```\ngrunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n\n  abideCreate: {\n    default: { // Target name.\n      options: {\n        template: 'locale/templates/LC_MESSAGES/messages.pot', // (default: 'locale/templates/LC_MESSAGES/messages.pot')\n        locales: locales,\n        localeDir: 'locale',\n      }\n    }\n  },\n  abideExtract: {\n    js: {\n      src: 'lib/**/*.js',\n      dest: 'locale/templates/LC_MESSAGES/messages.pot',\n      options: {\n        language: 'JavaScript',\n      }\n    },\n    html: {\n      src: 'templates/payments/*.html',\n      dest: 'locale/templates/LC_MESSAGES/messages.pot',\n      options: {\n        language: 'Jinja',\n      }\n    },\n  },\n  abideMerge: {\n    default: { // Target name.\n      options: {\n        template: 'locale/templates/LC_MESSAGES/messages.pot', // (default: 'locale/templates/LC_MESSAGES/messages.pot')\n        localeDir: 'locale',\n      }\n    }\n  },\n  abideCompile: {\n    json: {\n      dest: 'media/locale/',\n      options: {\n        type: 'json',\n      }\n    },\n    mo: {\n      options: {\n        type: 'mo',\n      }\n    }\n  },\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n### Where to file bugs\n\nBear in mind this code only wraps `jsxgettext` and standard `gettext` tools. If there's a problem with how grunt talks to `jsxgettext` or those CLI tools then that's a problem with this package. However if the output is not correct (and it's not related to configuration) please file a bug on the relevant project.\n\n## Release History\n\n* 0.0.3: Updated for initial npm release.\n* 0.0.2: Updates related to jsxgettext changes.\n* 0.0.1: Initial version.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-i18n-abide@0.0.3",
  "_from": "grunt-i18n-abide@0.0.3"
}
