{
  "name": "super-request",
  "version": "0.0.4",
  "description": "Wrapper on top of request for testing HTTP servers",
  "main": "index.js",
  "scripts": {
    "test": "it -r dotmatrix"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:doug-martin/super-request.git"
  },
  "keywords": [
    "request",
    "rest",
    "test",
    "testing",
    "http",
    "tdd",
    "bdd"
  ],
  "author": {
    "name": "Doug Martin"
  },
  "license": "MIT",
  "dependencies": {
    "comb": "~0.2.1",
    "request": "~2.16.0",
    "methods": "0.0.1"
  },
  "devDependencies": {
    "it": "~0.2.0",
    "express": "~3.0.5"
  },
  "readme": "[![build status](https://secure.travis-ci.org/doug-martin/super-request.png)](http://travis-ci.org/doug-martin/super-request)\n\n# Super Request\n\n`super-request` is a [`supertest`](https://github.com/visionmedia/supertest) inspired HTTP assertion tester.\n\n## About\n\n`super-request` is very similar to `supertest` except that it leverages the [`request`](https://github.com/mikeal/request) module and supports sessions and chaining of HTTP requests.\n\n## Installation\n\n`npm install super-request`\n\n## Example\n\n```javascript\n\nvar request = require('super-request'),\n\texpress = require('express');\n\nvar app = express();\n\t\napp.use(express.cookieParser());\napp.use(express.cookieSession({secret: \"super-request123\"}));\n\napp.get('/login', function (req, res) {\n\treq.session.loggedIn = true;\n\tres.send(\"logged in\");\n});\n\napp.get('/', function (req, res) {\n\tif (req.session.loggedIn) {\n\t\treq.session.loggedIn = true;\n\t\tres.send(\"loggedIn\");\n\t} else {\n\t\tres.send(\"notLoggedIn\");\n\t}\n});\n\nrequest(app)\n\t.get('/login')\n\t.expect(200, \"logged in\")\n\t.end()\n\t//after we logged in perform this request in the same session!\n\t.get(\"/\")\n\t.expect(200, \"loggedIn\")\n\t.end(function(err){\n\t\tif(err){\n\t\t\tthrow err;\n\t\t}\n\t});\n```\n\n## Using with testing frameworks\n\n### Mocha\n\nHere is an example using with `mocha`.\n\n```javascript\ndescribe('GET /users', function(){\n  it('respond with json', function(done){\n    request(app)\n      .get('/user')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200, done);\n  })\n})\n```\n\n`super-request` also returns a promise so you can use it with promise based test frameworks here is an an example using `it` and returning a promise.\n\n```javascript\n\nit.describe('GET /users', function(it){\n  it.should('respond with json', function(){\n    return request(app)\n      \t.get('/user')\n      \t.set('Accept', 'application/json')\n      \t.expect('Content-Type', /json/)\n      \t.expect(200)\n      \t.end();\n  });\n});\n\n```\n\n\n## API\n\n**`.expect(status[, fn])`**\n\nAssert response status code.\n\n**`.expect(status, body[, fn])`**\n\nAssert response status code and body.\n\n**`.expect(body[, fn])`**\n\nAssert response body text with a string, regular expression, or parsed body object.\n\n**`.expect(field, value[, fn])`**\n\nAssert header field value with a string or regular expression.\n\n**`.end(fn)`**\n\nPerform the request and invoke fn(err, res).\n\n`super-request` is a wrapper on top of `request` so any options you can specify with request you can also set using the chainable api, by invoking a function with the same name as the option you wish to set.\n\n**Methods** (see [`request`](https://github.com/mikeal/request))\n\n* `uri` || `url` - fully qualified uri or a parsed url object from url.parse()\n* `qs` - object containing querystring values to be appended to the uri\n* `method` - http method, defaults to GET\n* `headers` - http headers, defaults to {}\n* `body` - entity body for POST and PUT requests. Must be buffer or string.\n* `form` - when passed an object this will set `body` but to a querystring representation of value and adds `Content-type: application/x-www-form-urlencoded; charset=utf-8` header. When passed no option a FormData instance is returned that will be piped to request.\n* `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header.  Additionally, parses the response body as json.\n* `multipart` - (experimental) array of objects which contains their own headers and `body` attribute. Sends `multipart/related` request. See example below.\n* `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n* `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n* `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n* `encoding` - Encoding to be used on `setEncoding` of response data. If set to `null`, the body is returned as a Buffer.\n* `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node's default maxSockets.\n* `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n* `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\t\n* `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it's supported with the `url` parameter by embedding the auth info in the uri.\n* `oauth` - Options for OAuth HMAC-SHA1 signing, see documentation above.\n* `strictSSL` - Set to `true` to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n* `jar` - Set to `false` if you don't want cookies to be remembered for future use or define your custom cookie jar (see examples section)\n* `aws` - object containing aws signing information, should have the properties `key` and `secret` as well as `bucket` unless you're specifying your bucket as part of the path, or you are making a request that doesn't use a bucket (i.e. GET Services)\n\n```javascript\nrequest(app)\n\t.post(\"/login\")\n\t.form({username : \"username\", password : \"password\"})\n\t.expect(200)\n\t.expect({loggedIn : true})\n\t.end(function(err){\n\t\tif(err){\n\t\t\tthrow err;\n\t\t}\n\t});\n\n```\n\nTo upload data to a server \n\n```javascript\nrequest(app)\n\t.post(\"/upload/csv\")\n\t.headers({'content-type': 'multipart/form-data'})\n\t.multipart([\n\t\t{\n\t\t\t'Content-Disposition': 'form-data; name=\"file\"; filename=\"my.csv\"',\n\t\t\t'Content-Type': 'text/csv',\n\t\t\tbody: fs.readFileSync(path.resolve(__dirname, \"./assets/my.csv\"))\n\t\t}\n\t])\n\t.expect(200)\n\t.expect(\"content-type\", \"text/plain\")\n\t.end(function(err){\n\t\tif(err){\n\t\t\tthrow err;\n\t\t}\n\t});\n                \n```\n\n### Chaining requests\n\n`super-request` supports chaining of requests, this is particularly useful if you need to login to your server and then perform a request.\n\n```javascript\nrequest(app)\n\t.post(\"/login\")\n\t.form({username : \"username\", password : \"password\"})\n\t.expect(200)\n\t.expect({loggedIn : true})\n\t.end() //this request is done\n\t//now start a new one in the same session\n\t.get(\"/some/protected/route\")\n\t.expect(200, {hello : \"world\"})\n\t.end(function(err){\n\t\tif(err){\n\t\t\tthrow err;\n\t\t}\n\t});\n\n```\n\n**Note** You must call end on the current request before you can start a new one.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/doug-martin/super-request/issues"
  },
  "homepage": "https://github.com/doug-martin/super-request",
  "_id": "super-request@0.0.4",
  "_from": "super-request@~0.0.4"
}
